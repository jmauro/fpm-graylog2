#! /bin/sh
### BEGIN INIT INFO
# Provides:		graylog2-server
# Required-Start:	$network $local_fs $remote_fs $elasticsearch
# Required-Stop:	$network $local_fs $remote_fs
# Default-Start:	2 3 4 5
# Default-Stop:		0 1 6
# Short-Description:	Graylog2 startup script
# Description:		This daemon listens for syslog and 
#			GELF messages and stores them in mongodb
### END INIT INFO

# Author: Jeremy MAURO <jmauro@antidot.net>
#
# Please remove the "Author" lines above and replace them
# with your own name if you copy and modify this script.

# Do NOT "set -e"

# PATH should only include /usr/* if it runs after the mountnfs.sh script
PATH=/sbin:/usr/sbin:/bin:/usr/bin
DESC="Syslog server"
NAME=graylog2-server
GRAYLOG2_SERVER_HOME=/opt/graylog2-server/lib
PIDFILE=/var/run/${NAME}.pid
SCRIPTNAME=/etc/init.d/${NAME}
JAVA_CMD="$(which java)"

# Read configuration variable file if it is present
[ -r /etc/default/${NAME} ] && . /etc/default/${NAME}

DAEMON=${GRAYLOG2_SERVER_HOME}/graylog2-server.jar
# The option '-f' is not used just to show the configuration used by default
DAEMON_ARGS="-jar ${DAEMON} -f /etc/graylog2.conf"

# Exit if the package is not installed
[ -f "${DAEMON}" ] || exit 0

# Load the VERBOSE setting and other rcS variables
. /lib/init/vars.sh

# Define LSB log_* functions.
# Depend on lsb-base (>= 3.2-14) to ensure that this file is present
# and status_of_proc is working.
. /lib/lsb/init-functions

#
# Function that starts the daemon/service
#
do_start()
{
	log_action_msg "Starting starting process of ${DESC}"
	# Return
	#	0 if daemon has been started
	#	1 if daemon was already running
	#	2 if daemon could not be started
	start-stop-daemon --start --quiet --pidfile ${PIDFILE} --exec ${JAVA_CMD} --test > /dev/null \
		|| return 1
	start-stop-daemon --start --background -m --pidfile ${PIDFILE} --exec ${JAVA_CMD} -- \
		${DAEMON_ARGS} \
		|| return 2
	# Add code here, if necessary, that waits for the process to be ready
	# to handle requests from services started subsequently which depend
	# on this one.	As a last resort, sleep for some time.
	
	sleep 2
	graylog2_test
	RETVAL="$?"
	[ "${VERBOSE}" != no ] && log_daemon_msg "Starting ${DESC}" "${NAME}"
	case "${RETVAL}" in
		0|1)	[ "${VERBOSE}" != no ] && log_end_msg 0 ;;
		2)	[ "${VERBOSE}" != no ] && log_end_msg 1 ;;
	esac
	return ${RETVAL}
}

#
# Function that stops the daemon/service
#
do_stop()
{
	[ "${VERBOSE}" != no ] && log_daemon_msg "Stopping ${DESC}" "${NAME}"
	# Return
	#	0 if daemon has been stopped
	#	1 if daemon was already stopped
	#	2 if daemon could not be stopped
	#	other if a failure occurred
	start-stop-daemon --stop --quiet --retry=TERM/30/KILL/5 --pidfile $PIDFILE --exec ${JAVA_CMD} -- \
		${DAEMON_ARGS}
	RETVAL="$?"
	[ "${RETVAL}" = 2 ] && return 2
	# Many daemons don't delete their pidfiles when they exit.
	case "${RETVAL}" in
		0|1)	[ "${VERBOSE}" != no ] && log_end_msg 0 ;;
		2)	[ "${VERBOSE}" != no ] && log_end_msg 1 ;;
	esac
	rm -f ${PIDFILE}
	return "${RETVAL}"
}

#
# Function that sends a SIGHUP to the daemon/service
#
do_reload() {
	#
	# If the daemon can reload its configuration without
	# restarting (for example, when it is sent a SIGHUP),
	# then implement that here.
	#
	start-stop-daemon --stop --signal 1 --quiet --pidfile ${PIDFILE} --name ${NAME}
	return 0
}

#
# Function that check status
#
do_status() {
	pgrep -f "${JAVA_CMD} ${DAEMON_ARGS}" > /dev/null 2>&1
	status="$?"
	if [ "${status}" = 0 ]; then
		log_success_msg "${NAME} is running"
		return 0
	else
		log_failure_msg "${NAME} is not running"
		return $status
	fi
}

graylog2_test() {
	# Graylog2 only deletes its PID file if it hits a config error
	[ "${VERBOSE}" != no ] && log_daemon_msg "Checking configuration file" "${NAME}"
	if [ ! -e ${PIDFILE} ]; then
		[ "${VERBOSE}" != no ] && log_end_msg 1
		return 2
	else
		[ "${VERBOSE}" != no ] && log_end_msg 0
	fi

	local pid="$(cat ${PIDFILE})"

	# Graylog2 isn't running, so that means there was a problem
	if [ ! -e /proc/${pid} ]; then
		rm -f ${PIDFILE}
		return 2
	else
		return 1
	fi
}

case "$1" in
	start)
		do_start
		;;
	stop)
		do_stop
		;;
	status)
		do_status
		;;
	restart|reload|force-reload)
		#
		# If the "reload" option is implemented then remove the
		# 'force-reload' alias
		#
		log_action_msg "Restarting ${NAME}"
		do_stop
		case "$?" in
			0|1)
				do_start
			;;
		esac
		;;
	*)
		#echo "Usage: $SCRIPTNAME {start|stop|restart|reload|force-reload}" >&2
		echo "Usage: ${SCRIPTNAME} {start|stop|status|restart|force-reload}" >&2
		exit 3
		;;
esac

:
